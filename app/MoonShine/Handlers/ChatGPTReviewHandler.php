<?php

declare(strict_types=1);

namespace App\MoonShine\Handlers;

use App\Models\Review;
use App\Models\ReviewTopic;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use MoonShine\Laravel\MoonShineUI;
use MoonShine\Support\Enums\ToastType;
use MoonShine\UI\Exceptions\ActionButtonException;
use MoonShine\Laravel\Handlers\Handler;
use MoonShine\Contracts\UI\ActionButtonContract;
use MoonShine\UI\Components\ActionButton;
use Symfony\Component\HttpFoundation\Response;

class ChatGPTReviewHandler extends Handler
{
    public function __construct(string $label = '–ù–∞—á–∞—Ç—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ')
    {
        parent::__construct($label);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤ —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º.
     *
     * @throws ActionButtonException
     */
    public function handle(): Response
    {
        self::process();
        return back();
    }

    /**
     * –ú–∞—Å—Å–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ —Å –Ω—É–∂–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–Ω–æ–≤—ã–π4").
     */
    public static function process(): void
    {
        $availableTopics = ReviewTopic::pluck('name_topic', 'id')->toArray();
        $reviews = Review::where('status', '–ù–æ–≤—ã–π')->get();

        foreach ($reviews as $review) {
            self::processReview($review, $availableTopics);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞.
     *
     * @param Review $review
     * @param array|null $availableTopics (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —É–∂–µ –ø–æ–ª—É—á–µ–Ω)
     */
    public static function processReview(Review $review, ?array $availableTopics = null): void
    {
        // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Ç–µ–º –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –∏–∑ –±–∞–∑—ã
        $availableTopics = $availableTopics ?? ReviewTopic::pluck('name_topic', 'id')->toArray();
        $topicsString = implode(', ', $availableTopics);

        $productName = $review->product ? $review->product->name : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        $reviewText = "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {$productName}\n" .
            "–î–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞: " . ($review->pluses ?: "–Ω–µ—Ç") . "\n" .
            "–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏: " . ($review->cons ?: "–Ω–µ—Ç") . "\n" .
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: " . ($review->comment_text ?: "–Ω–µ—Ç");
        $clientName = $review->name_user ?: '–£–≤–∞–∂–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç';
        $evaluation = $review->evaluation ?? '–û—Ü–µ–Ω–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
        $prompt = <<<PROMPT
–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º–∞—Ç–∏–∫–∏: {$topicsString}.

–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –ª—É—á—à–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ä–∞–±–æ—Ç–µ —Å –æ—Ç–∑—ã–≤–∞–º–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–∑—ã–≤, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ, –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞—Ö, –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞—Ö, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∏ –æ—Ü–µ–Ω–∫–µ. –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: "{$clientName}". –ï—Å–ª–∏ –∏–º—è —É–∫–∞–∑–∞–Ω–æ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏.

–û—Ü–µ–Ω–∫–∞ –æ—Ç–∑—ã–≤–∞: {$evaluation}.

–û–ø—Ä–µ–¥–µ–ª–∏:
- –æ–¥–Ω—É —Ç–µ–º–∞—Ç–∏–∫—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞–∏–ª—É—á—à–∏–º –æ–±—Ä–∞–∑–æ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç –æ—Ç–∑—ã–≤;
- —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç–∑—ã–≤–∞ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è);
- –∏ —Å–æ—Å—Ç–∞–≤—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, —á–µ–ª–æ–≤–µ—á–Ω—ã–π –æ—Ç–≤–µ—Ç, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∏–Ω–∞—è —Å "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {$clientName}!" (–∏–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è).

üîΩ –ß—Ç–æ –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –æ—Ç–≤–µ—Ç:
–£—á—Ç–∏, —á—Ç–æ:
- –ï—Å–ª–∏ –æ—Ü–µ–Ω–∫–∞ 1 –∏–ª–∏ 2, –Ω–æ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π , –¥–æ–±–∞–≤—å –≤ –æ—Ç–≤–µ—Ç –∑–∞–º–µ—á–∞–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç, –≤–æ–∑–º–æ–∂–Ω–æ, –æ—à–∏–±—Å—è –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏ –∏ —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–µ –Ω–∞ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫—É—é.
- –ï—Å–ª–∏ —á–∏—Å–ª–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–∫—Ä–∞—Å–∫–µ —Ç–µ–∫—Å—Ç–∞, —Å–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –æ–ø–∏—Ä–∞—Ç—å—Å—è –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞.

‚Äî –ï—Å–ª–∏ –æ—Ç–∑—ã–≤ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π:
    * –ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ –∫–ª–∏–µ–Ω—Ç–∞;
    * –ü–æ–¥—á–µ—Ä–∫–Ω–∏, —á—Ç–æ –≤–∞–º –ø—Ä–∏—è—Ç–Ω–æ;
    * –ü—Ä–∏–≥–ª–∞—Å–∏ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∂–µ–ª–∞–π —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è.
    * –ï—Å–ª–∏ {$evaluation} –æ—Ç–∑—ã–≤–∞ 1 –∏–ª–∏ 2, –Ω–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è, –¥–æ–±–∞–≤—å –≤ –æ—Ç–≤–µ—Ç –∑–∞–º–µ—á–∞–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç, –≤–æ–∑–º–æ–∂–Ω–æ, –æ—à–∏–±—Å—è –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏ –∏ —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–µ –Ω–∞ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫—É—é.
‚Äî –ï—Å–ª–∏ –æ—Ç–∑—ã–≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π:
    * –ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏;
    * –ü–æ–∫–∞–∂–∏, —á—Ç–æ —Ü–µ–Ω–∏—à—å –º–Ω–µ–Ω–∏–µ;
    * –°–æ–æ–±—â–∏, —á—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç—ë—à—å –≤—Å—ë —Å–∫–∞–∑–∞–Ω–Ω–æ–µ.
‚Äî –ï—Å–ª–∏ –æ—Ç–∑—ã–≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π:
    * –ò–∑–≤–∏–Ω–∏—Å—å;
    * –í—ã—Ä–∞–∑–∏ —Å–æ—á—É–≤—Å—Ç–≤–∏–µ;
    * –ü–æ–æ–±–µ—â–∞–π —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è;
    * –ü—Ä–µ–¥–ª–æ–∂–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.

–í–æ—Ç –æ—Ç–∑—ã–≤:
{$reviewText}

–í–µ—Ä–Ω–∏ JSON:
{
  "topic": "–≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞",
  "tone": "—Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å",
  "reply": "–æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤"
}
PROMPT;


        $response = Http::withHeaders([
            'Authorization' => 'Bearer ' . config('services.proxyapi.api_key'),
            'Content-Type'  => 'application/json',
        ])->post(
            config('services.proxyapi.base_url') . '/chat/completions', [
                'model'    => config('services.proxyapi.model'),
                'messages' => [
                    ['role' => 'system', 'content' => '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –æ—Ç–∑—ã–≤–æ–≤.'],
                    ['role' => 'user', 'content' => $prompt],
                ],
                'temperature' => 0.7,
                'max_tokens'  => 300,
            ]
        );

        if (!$response->successful()) {
            Log::error('ChatGPT API Error', [
                'review_id' => $review->id,
                'status'    => $response->status(),
                'response'  => $response->body(),
            ]);
            return;
        }

        Log::info('ChatGPT API Response for review', [
            'review_id' => $review->id,
            'response'  => $response->json(),
        ]);

        $result = $response->json();
        $content = $result['choices'][0]['message']['content'] ?? null;

        if ($content) {
            // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–º–ª–µ–Ω–∏–µ –≤ –≤–∏–¥–µ ```json –∏ ``` (–µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å)
            $cleanContent = trim(preg_replace('/^```(json)?\s*|```$/i', '', $content));
            $analysis = json_decode($cleanContent, true);

            if (json_last_error() === JSON_ERROR_NONE && is_array($analysis)) {
                $selectedTopic = $analysis['topic'] ?? null;
                $topicId = array_search($selectedTopic, $availableTopics);
                if ($topicId !== false) {
                    $review->topic_review_id = $topicId;
                }
                $review->sentiment = $analysis['tone'] ?? null;
                $review->response = $analysis['reply'] ?? null;
                $review->status = '–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω';
                MoonShineUI::toast('–û—Ç–≤–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', ToastType::SUCCESS);
                $review->save();
            } else {
                Log::error('JSON decoding error in processReview', [
                    'review_id'    => $review->id,
                    'clean_content'=> $cleanContent,
                    'json_error'   => json_last_error_msg(),
                ]);
            }
        } else {
            Log::warning('Empty content received from ChatGPT in processReview', [
                'review_id' => $review->id,
            ]);
        }
    }

    public function getButton(): ActionButtonContract
    {
        return ActionButton::make($this->getLabel(), $this->getUrl());
    }
}
